{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2023,
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    },
    "project": "./tsconfig.json",
    "tsconfigRootDir": "."
  },
  "plugins": [
    "@typescript-eslint",
    "react",
    "react-hooks",
    "prettier",
    "import",
    "tailwindcss",
    "unused-imports",
    "simple-import-sort",
    "jsx-a11y",
    "promise",
    "optimize-regex",
    "no-secrets",
    "security",
    "perfectionist",
    "@emotion",
    "unicorn"
  ],
  "extends": [
    "eslint:recommended",
    "next/core-web-vitals",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:react/recommended",
    "plugin:react/jsx-runtime",
    "plugin:react-hooks/recommended",
    "plugin:prettier/recommended",
    "plugin:import/recommended",
    "plugin:import/typescript",
    "plugin:tailwindcss/recommended",
    "plugin:jsx-a11y/strict",
    "plugin:promise/recommended",
    "plugin:unicorn/recommended"
  ],
  "env": {
    "browser": true,
    "es2024": true,
    "node": true,
    "jest": true
  },
  "settings": {
    "react": {
      "version": "detect"
    },
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true,
        "project": "./tsconfig.json"
      },
      "node": {
        "extensions": [".js", ".jsx", ".ts", ".tsx"]
      }
    },
    "import/parsers": {
      "@typescript-eslint/parser": [".ts", ".tsx"]
    },
    "tailwindcss": {
      "callees": ["cn", "clsx", "twMerge"],
      "config": "tailwind.config.ts"
    }
  },
  "rules": {
    // TypeScript specific rules
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_",
        "caughtErrorsIgnorePattern": "^_",
        "destructuredArrayIgnorePattern": "^_"
      }
    ],
    "@typescript-eslint/no-explicit-any": "off", // error - if your need won't any type
    "@typescript-eslint/explicit-function-return-type": [
      "error",
      {
        "allowExpressions": true,
        "allowTypedFunctionExpressions": true,
        "allowHigherOrderFunctions": true,
        "allowDirectConstAssertionInArrowFunctions": true
      }
    ],
    "arrow-body-style": ["error", "as-needed"],
    "prefer-arrow-callback": "error",
    "@typescript-eslint/consistent-type-imports": [
      "error",
      {
        "prefer": "type-imports",
        "fixStyle": "inline-type-imports"
      }
    ],
    //    "@typescript-eslint/consistent-type-definitions": ["error", "interface"],
    "@typescript-eslint/consistent-type-assertions": [
      "error",
      {
        "assertionStyle": "as",
        "objectLiteralTypeAssertions": "never"
      }
    ],
    "@typescript-eslint/no-floating-promises": "error",
    "@typescript-eslint/no-misused-promises": "error",
    "@typescript-eslint/await-thenable": "off", // error
    "@typescript-eslint/no-unnecessary-type-assertion": "error",
    "@typescript-eslint/no-unnecessary-condition": "error",
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
    "@typescript-eslint/prefer-nullish-coalescing": "error",
    "@typescript-eslint/prefer-optional-chain": "error",
    "@typescript-eslint/non-nullable-type-assertion-style": "error",
    "@typescript-eslint/prefer-ts-expect-error": "error",
    "@typescript-eslint/ban-ts-comment": [
      "error",
      {
        "ts-expect-error": "allow-with-description",
        "ts-ignore": "allow-with-description",
        "ts-nocheck": true,
        "ts-check": false,
        "minimumDescriptionLength": 10
      }
    ],
    "@typescript-eslint/sort-type-constituents": [
      "error",
      {
        "checkIntersections": true,
        "checkUnions": true
      }
    ],
    "@typescript-eslint/no-unsafe-assignment": "off",
    "@typescript-eslint/no-unsafe-return": "off",
    "@typescript-eslint/no-unsafe-member-access": "off",
    "@typescript-eslint/no-unsafe-argument": "off",

    // React specific rules
    "react/react-in-jsx-scope": "off",
    "react/prop-types": "off",
    "react/jsx-sort-props": [
      "error",
      {
        "callbacksLast": true,
        "shorthandFirst": true,
        "shorthandLast": false,
        "ignoreCase": false,
        "noSortAlphabetically": false,
        "reservedFirst": true,
        "multiline": "last"
      }
    ],
    "react/jsx-no-useless-fragment": [
      "error",
      {
        "allowExpressions": true
      }
    ],
    "react/jsx-pascal-case": [
      "error",
      {
        "allowAllCaps": false,
        "allowNamespace": false,
        "allowLeadingUnderscore": false
      }
    ],
    "react/jsx-no-leaked-render": [
      "error",
      {
        "validStrategies": ["ternary", "coerce"]
      }
    ],
    "react/jsx-max-depth": [
      "error",
      {
        "max": 4
      }
    ],
    "react/jsx-no-duplicate-props": [
      "error",
      {
        "ignoreCase": false
      }
    ],
    "react/jsx-curly-brace-presence": [
      "error",
      {
        "props": "never",
        "children": "never",
        "propElementValues": "always"
      }
    ],
    "react/jsx-boolean-value": ["error", "never"],
    "react/jsx-no-target-blank": [
      "error",
      {
        "allowReferrer": false,
        "enforceDynamicLinks": "always",
        "warnOnSpreadAttributes": true,
        "links": true,
        "forms": true
      }
    ],
    "react/no-array-index-key": "error",
    "react/no-danger": "error",
    "react/no-multi-comp": [
      "error",
      {
        "ignoreStateless": false
      }
    ],
    "react/self-closing-comp": [
      "error",
      {
        "component": true,
        "html": true
      }
    ],
    "react/function-component-definition": [
      "error",
      {
        "namedComponents": "arrow-function",
        "unnamedComponents": "arrow-function"
      }
    ],

    // React Hooks rules
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": [
      "warn",
      {
        "additionalHooks": "(useRecoilCallback|useRecoilTransaction_UNSTABLE)"
      }
    ],

    // Import sorting and organization
    "simple-import-sort/imports": [
      "error",
      {
        "groups": [
          ["^react$", "^next", "^@next"], // React and Next.js related packages
          ["^@/"], // Aliased imports
          ["^@?\\w"], // External packages
          ["^~/"], // Internal packages
          ["^\\.\\.(?!/?$)", "^\\.\\./?$"], // Parent imports
          ["^\\./(?=.*/)(?!/?$)", "^\\.(?!/?$)", "^\\./?$"], // Other relative imports
          ["^.+\\.s?css$"], // Style imports
          ["^@/types"], // Type imports
          ["^\\u0000"] // Side effect imports
        ]
      }
    ],
    "simple-import-sort/exports": "error",
    "import/first": "error",
    "import/newline-after-import": [
      "error",
      {
        "count": 1
      }
    ],
    "import/no-duplicates": [
      "error",
      {
        "considerQueryString": true
      }
    ],
    "unused-imports/no-unused-imports": "error",
    "unused-imports/no-unused-vars": [
      "warn",
      {
        "vars": "all",
        "varsIgnorePattern": "^_",
        "args": "after-used",
        "argsIgnorePattern": "^_"
      }
    ],
    "import/no-cycle": [
      "error",
      {
        "maxDepth": 1,
        "ignoreExternal": true
      }
    ],
    "import/no-deprecated": "warn",
    "import/no-mutable-exports": "error",
    "import/no-self-import": "error",
    "import/no-useless-path-segments": [
      "error",
      {
        "noUselessIndex": true
      }
    ],

    // Code style and formatting
    "no-console": [
      "warn",
      {
        "allow": ["warn", "error"]
      }
    ],
    "prettier/prettier": [
      "error",
      {
        "semi": false,
        "singleQuote": true,
        "tabWidth": 2,
        "trailingComma": "es5",
        "printWidth": 100,
        "bracketSpacing": true,
        "arrowParens": "avoid",
        "endOfLine": "auto",
        "singleAttributePerLine": true,
        "jsxSingleQuote": false
      }
    ],

    // Tailwind specific rules
    "tailwindcss/classnames-order": "error",
    "tailwindcss/no-custom-classname": [
      "warn",
      {
        "whitelist": ["theme-*"]
      }
    ],
    "tailwindcss/no-contradicting-classname": "error",
    "tailwindcss/enforces-shorthand": "error",

    // Accessibility rules
    "jsx-a11y/alt-text": [
      "error",
      {
        "elements": ["img", "object", "area", "input[type=\"image\"]"],
        "img": ["Image", "NextImage"],
        "object": ["Object"],
        "area": ["Area"],
        "input[type=\"image\"]": ["InputImage"]
      }
    ],
    "jsx-a11y/anchor-has-content": [
      "error",
      {
        "components": ["Link", "NextLink"]
      }
    ],
    "jsx-a11y/aria-props": "error",
    "jsx-a11y/aria-proptypes": "error",
    "jsx-a11y/aria-role": [
      "error",
      {
        "ignoreNonDOM": true
      }
    ],
    "jsx-a11y/click-events-have-key-events": "error",
    "jsx-a11y/heading-has-content": "error",
    "jsx-a11y/html-has-lang": "error",
    "jsx-a11y/iframe-has-title": "error",
    "jsx-a11y/img-redundant-alt": "error",
    "jsx-a11y/interactive-supports-focus": "error",
    "jsx-a11y/label-has-associated-control": [
      "error",
      {
        "labelComponents": ["Label"],
        "labelAttributes": ["htmlFor"],
        "controlComponents": ["Input", "Select", "Textarea"],
        "depth": 3
      }
    ],

    // Promise related rules
    "promise/always-return": "error",
    "promise/no-callback-in-promise": "error",
    "promise/no-nesting": "error",
    "promise/no-promise-in-callback": "error",
    "promise/no-return-wrap": "error",
    "promise/param-names": "error",

    // Security rules
    "no-secrets/no-secrets": [
      "error",
      {
        "ignoreContent": ["^https://", "^test", "^example"]
      }
    ],
    "security/detect-buffer-noassert": "error",
    "security/detect-child-process": "error",
    "security/detect-disable-mustache-escape": "error",
    "security/detect-eval-with-expression": "error",
    "security/detect-new-buffer": "error",
    "security/detect-no-csrf-before-method-override": "error",
    "security/detect-non-literal-fs-filename": "error",
    "security/detect-non-literal-regexp": "error",
    "security/detect-non-literal-require": "error",
    "security/detect-object-injection": "off",
    "security/detect-possible-timing-attacks": "error",
    "security/detect-pseudoRandomBytes": "error",
    "security/detect-unsafe-regex": "error",

    // Perfectionist rules for consistent ordering
    "perfectionist/sort-interfaces": [
      "error",
      {
        "type": "natural",
        "order": "asc"
      }
    ],
    "perfectionist/sort-named-imports": [
      "error",
      {
        "type": "natural",
        "order": "asc"
      }
    ],
    "perfectionist/sort-object-types": [
      "error",
      {
        "type": "natural",
        "order": "asc"
      }
    ],

    // Emotion specific rules
    "@emotion/jsx-import": "error",
    "@emotion/no-vanilla": "error",
    "@emotion/pkg-renaming": "error",
    "@emotion/syntax-preference": ["error", "string"],

    // Unicorn rules for better code
    "unicorn/better-regex": "error",
    "unicorn/catch-error-name": "error",
    "unicorn/consistent-destructuring": "error",
    "unicorn/custom-error-definition": "error",
    "unicorn/error-message": "error",
    "unicorn/escape-case": "error",
    "unicorn/expiring-todo-comments": "error",
    "unicorn/explicit-length-check": "error",
    "unicorn/new-for-builtins": "error",
    "unicorn/no-array-method-this-argument": "error",
    "unicorn/no-console-spaces": "error",
    "unicorn/no-empty-file": "error",
    "unicorn/no-hex-escape": "error",
    "unicorn/no-instanceof-array": "error",
    "unicorn/no-invalid-remove-event-listener": "error",
    "unicorn/no-nested-ternary": "error",
    "unicorn/no-new-array": "error",
    "unicorn/no-new-buffer": "error",
    "unicorn/no-object-as-default-parameter": "error",
    "unicorn/no-static-only-class": "error",
    "unicorn/no-unnecessary-await": "error",
    "unicorn/no-unused-properties": "error",
    "unicorn/no-useless-fallback-in-spread": "error",
    "unicorn/no-useless-length-check": "error",
    "unicorn/no-useless-promise-resolve-reject": "error",
    "unicorn/no-useless-spread": "error",
    "unicorn/no-zero-fractions": "error",
    "unicorn/prefer-add-event-listener": "error",
    "unicorn/prefer-array-find": "error",
    "unicorn/prefer-array-flat": "error",
    "unicorn/prefer-array-flat-map": "error",
    "unicorn/prefer-array-index-of": "error",
    "unicorn/prefer-array-some": "error",
    "unicorn/prefer-at": "error",
    "unicorn/prefer-code-point": "error",
    "unicorn/prefer-date-now": "error",
    "unicorn/prefer-default-parameters": "error",
    "unicorn/prefer-dom-node-append": "error",
    "unicorn/prefer-dom-node-dataset": "error",
    "unicorn/prefer-dom-node-remove": "error",
    "unicorn/prefer-dom-node-text-content": "error",
    "unicorn/prefer-includes": "error",
    "unicorn/prefer-keyboard-event-key": "error",
    "unicorn/prefer-math-trunc": "error",
    "unicorn/prefer-modern-dom-apis": "error",
    "unicorn/prefer-modern-math-apis": "error",
    "unicorn/prefer-module": "error",
    "unicorn/prefer-negative-index": "error",
    "unicorn/prefer-node-protocol": "error",
    "unicorn/prefer-number-properties": "error",
    "unicorn/prefer-object-from-entries": "error",
    "unicorn/prefer-optional-catch-binding": "error",
    "unicorn/prefer-prototype-methods": "error",
    "unicorn/prefer-query-selector": "error",
    "unicorn/prefer-reflect-apply": "error",
    "unicorn/prefer-regexp-test": "error",
    "unicorn/prefer-set-has": "error",
    "unicorn/prefer-string-replace-all": "error",
    "unicorn/prefer-string-slice": "error",
    "unicorn/prefer-string-starts-ends-with": "error",
    "unicorn/prefer-string-trim-start-end": "error",
    "unicorn/prefer-switch": "error",
    "unicorn/prefer-ternary": "error",
    "unicorn/prefer-top-level-await": "error",
    "unicorn/prefer-type-error": "error",
    "unicorn/prevent-abbreviations": [
      // this
      "error",
      {
        "allowList": {
          "props": true,
          "ref": true,
          "params": true
        }
      }
    ],
    "unicorn/relative-url-style": ["error", "always"],
    "unicorn/require-post-message-target-origin": "error",
    "unicorn/string-content": [
      "error",
      {
        "patterns": {
          "': '": "': '",
          "\\( ": "(",
          " \\)": ")",
          " ;": ";",
          " ,": ","
        }
      }
    ],
    "unicorn/switch-case-braces": ["error", "always"],
    "unicorn/text-encoding-identifier-case": "error",
    "unicorn/throw-new-error": "error",
    "unicorn/no-null": "off",

    // Additional TypeScript rules
    "@typescript-eslint/adjacent-overload-signatures": "error",
    "@typescript-eslint/array-type": [
      "error",
      {
        "default": "array-simple"
      }
    ],
    "@typescript-eslint/ban-tslint-comment": "error",
    "@typescript-eslint/class-literal-property-style": ["error", "fields"],
    "@typescript-eslint/consistent-generic-constructors": ["error", "constructor"],
    "@typescript-eslint/consistent-indexed-object-style": ["error", "record"],
    "@typescript-eslint/consistent-type-exports": [
      "error",
      {
        "fixMixedExportsWithInlineTypeSpecifier": true
      }
    ],
    "@typescript-eslint/method-signature-style": ["error", "property"],
    //    "@typescript-eslint/naming-convention": [
    //      "error",
    //      {
    //        "selector": "default",
    //        "format": ["camelCase", "PascalCase", "UPPER_CASE"],
    //        "leadingUnderscore": "allow",
    //        "trailingUnderscore": "forbid"
    //      },
    //      {
    //        "selector": "variable",
    //        "format": ["camelCase", "UPPER_CASE", "PascalCase"],
    //        "leadingUnderscore": "allow",
    //        "trailingUnderscore": "forbid"
    //      },
    //      {
    //        "selector": "function",
    //        "format": ["camelCase", "PascalCase"]
    //      },
    //      {
    //        "selector": "interface",
    //        "format": ["PascalCase"],
    //        "custom": {
    //          "regex": "^I[A-Z]",
    //          "match": false
    //        }
    //      },
    //      {
    //        "selector": "typeAlias",
    //        "format": ["PascalCase"],
    //        "custom": {
    //          "regex": "^I[A-Z]",
    //          "match": false
    //        }
    //      },
    //      {
    //        "selector": "import",
    //        "format": ["camelCase", "PascalCase", "UPPER_CASE"]
    //      }
    //    ],
    "@typescript-eslint/no-base-to-string": "error",
    "@typescript-eslint/no-confusing-non-null-assertion": "error",
    "@typescript-eslint/no-confusing-void-expression": [
      "error",
      {
        "ignoreArrowShorthand": true,
        "ignoreVoidOperator": true
      }
    ],
    "@typescript-eslint/no-dynamic-delete": "error",
    "@typescript-eslint/no-empty-interface": [
      "error",
      {
        "allowSingleExtends": true
      }
    ],
    "@typescript-eslint/no-extra-non-null-assertion": "error",
    "@typescript-eslint/no-extraneous-class": [
      "error",
      {
        "allowConstructorOnly": false,
        "allowEmpty": false,
        "allowStaticOnly": false,
        "allowWithDecorator": true
      }
    ],
    "@typescript-eslint/no-invalid-void-type": "error",
    "@typescript-eslint/no-meaningless-void-operator": "error",
    "@typescript-eslint/no-mixed-enums": "error",
    "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
    "@typescript-eslint/no-redundant-type-constituents": "error",
    "@typescript-eslint/no-require-imports": "error",
    "@typescript-eslint/no-this-alias": [
      "error",
      {
        "allowDestructuring": true,
        "allowedNames": ["self"]
      }
    ],
    "@typescript-eslint/no-unnecessary-qualifier": "error",
    "@typescript-eslint/no-useless-empty-export": "error",
    "@typescript-eslint/prefer-enum-initializers": "error",
    "@typescript-eslint/prefer-for-of": "error",
    "@typescript-eslint/prefer-function-type": "error",
    "@typescript-eslint/prefer-includes": "error",
    "@typescript-eslint/prefer-literal-enum-member": "error",
    "@typescript-eslint/prefer-reduce-type-parameter": "error",
    "@typescript-eslint/prefer-regexp-exec": "error",
    "@typescript-eslint/prefer-string-starts-ends-with": "error",
    "@typescript-eslint/promise-function-async": "error",
    "@typescript-eslint/require-array-sort-compare": [
      "error",
      {
        "ignoreStringArrays": true
      }
    ],
    "@typescript-eslint/switch-exhaustiveness-check": "error",
    "@typescript-eslint/unified-signatures": "error"
  },
  "overrides": [
    {
      "files": ["*.ts", "*.tsx"],
      "rules": {
        "@typescript-eslint/explicit-member-accessibility": [
          "error",
          {
            "accessibility": "explicit",
            "overrides": {
              "accessors": "explicit",
              "constructors": "no-public",
              "methods": "explicit",
              "properties": "explicit",
              "parameterProperties": "explicit"
            }
          }
        ]
      }
    },
    {
      "files": ["*.test.ts", "*.test.tsx"],
      "rules": {
        "@typescript-eslint/no-explicit-any": "off",
        "no-console": "off"
      }
    },
    {
      // Allow PascalCase for React components (.tsx files)
      "files": ["*.tsx"],
      "rules": {
        "unicorn/filename-case": [
          "error",
          {
            "cases": {
              "pascalCase": true,
              "kebabCase": true
            }
          }
        ]
      }
    },
    {
      // Enforce kebab-case or camelCase for all other files (.ts, .js, etc.)
      "files": ["*.ts", "*.js", "*.mjs"],
      "rules": {
        "unicorn/filename-case": [
          "error",
          {
            "cases": {
              "kebabCase": true,
              "camelCase": true
            }
          }
        ]
      }
    },
    {
      "files": ["*.js", "*.mjs"],
      "parser": "espree",
      "extends": ["eslint:recommended"],
      "rules": {
        "@typescript-eslint/no-var-requires": "off",
        "@typescript-eslint/*": "off"
      }
    },
    {
      "files": ["tailwind.config.ts"],
      "rules": {
        "@typescript-eslint/no-require-imports": "off",
        "unicorn/prefer-module": "off"
      }
    }
  ]
}
